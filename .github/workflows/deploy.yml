name: Simple DevOps CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Build and Push
      run: |
        docker build -t group6acr.azurecr.io/devops-advisor:latest .
        az acr login --name group6acr
        docker push group6acr.azurecr.io/devops-advisor:latest
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Terraform Apply
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: |
        # Extract values from AZURE_CREDENTIALS and export as ARM variables
        export ARM_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')
        export ARM_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')
        export ARM_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')
        export ARM_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')
        export TF_IN_AUTOMATION=true
        export TF_INPUT=false
        
        # Run Terraform with optimizations for speed
        cd terraform
        terraform init -upgrade
        
        # Force unlock if there's a stuck lock (ignore errors if no lock exists)
        terraform force-unlock -force ec6ffc3d-3832-e607-6a17-50c980a3fe35 || true
        
        # Destroy any existing resources first to start fresh
        terraform destroy -auto-approve \
          -var="ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID" \
          -var="resource_group_name=rg-devops-group6" \
          -var="resource_group_location=polandcentral" \
          -var="resource_prefix=devopsa" \
          -var="environment=dev" \
          -var="managed_disk_name=app-data" \
          -var="disk_size_gb=20" \
          -var="storage_account_type=Standard_LRS" \
          -var="author=group6" || true
        
        # Now create everything fresh
        terraform apply -auto-approve -parallelism=20 -refresh=false \
          -var="ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID" \
          -var="resource_group_name=rg-devops-group6" \
          -var="resource_group_location=polandcentral" \
          -var="resource_prefix=devopsa" \
          -var="environment=dev" \
          -var="managed_disk_name=app-data" \
          -var="disk_size_gb=20" \
          -var="storage_account_type=Standard_LRS" \
          -var="author=group6"
    
    - name: Setup AKS
      run: |
        az aks get-credentials --resource-group rg-devops-group6 --name devopsa-aks
        az aks update -n devopsa-aks -g rg-devops-group6 --attach-acr group6acr
    
    - name: Deploy App
      run: |
        kubectl create namespace devops-advisor --dry-run=client -o yaml | kubectl apply -f -
        kubectl create secret generic app-secret --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" --from-literal=FLASK_SECRET_KEY="${{ secrets.FLASK_SECRET_KEY }}" -n devops-advisor --dry-run=client -o yaml | kubectl apply -f -
        kubectl create secret generic postgres-secret --from-literal=POSTGRES_USER="${{ secrets.POSTGRES_USER }}" --from-literal=POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" --from-literal=POSTGRES_DB="${{ secrets.POSTGRES_DB }}" -n devops-advisor --dry-run=client -o yaml | kubectl apply -f -
        sed -i "s|devopsaacr.azurecr.io| group6acr.azurecr.io|g" k8s_solution/api-deploy.yml
        kubectl apply -f k8s_solution/
        kubectl wait --namespace devops-advisor --for=condition=ready pod -l app=postgres --timeout=300s
        kubectl wait --namespace devops-advisor --for=condition=ready pod -l app=devops-advisor --timeout=300s
    
    - name: Get Status
      run: |
        kubectl get pods -n devops-advisor
        kubectl get svc -n devops-advisor
        echo " External IP:"
        kubectl get svc devops-advisor-lb -n devops-advisor
